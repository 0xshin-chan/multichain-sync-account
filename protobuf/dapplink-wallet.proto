syntax = "proto3";
option go_package = "./protobuf/wallet";
package syncs;

enum ReturnCode{
  ERROR = 0;
  SUCCESS = 1;
}

// type in (eoa hot cold)
message PublicKey{
  string type = 1;
  string public_key = 2;
}

// type in (eoa hot cold)
message Address{
  string type = 1;
  string address = 2;
}

message Token{
  uint32 decimals = 1;
  string address = 2;
  string token_name = 3;
  string collect_amount = 4;
  string cold_amount = 5;
}

message BusinessRegisterRequest{
  string  consumer_token = 1;
  string  request_id = 2;
  string  notify_url = 3;
}

message BusinessRegisterResponse{
  ReturnCode Code = 1;
  string Msg = 2;
}

message ExportAddressesRequest{
  string  consumer_token = 1;
  string request_id = 2;
  repeated PublicKey public_keys = 3;
}

message ExportAddressesResponse {
  ReturnCode Code = 1;
  string msg = 2;
  repeated Address addresses = 3;
}

message UnSignTransaction {
  string chain_id = 1;
  string from = 2;
  string to = 3;
  string value = 4;
  string contract_address = 5;
  string token_id = 6;
  string token_meta = 7;
}

message UnSignTransactionRequest {
  string consumer_token = 1;
  string request_id = 2;
  repeated UnSignTransaction un_sign_txn = 3;
}

message UnSignTransactionMessageHash {
  string transaction_id = 1;
  string un_sign_tx = 2;
}

message UnSignTransactionResponse {
  ReturnCode code = 1;
  string msg = 2;
  repeated UnSignTransactionMessageHash un_sign_txn_msg_hash = 3;
}

message SignedTransaction {
  string chain_id = 1;
  string transaction_id = 2;
  string signature = 3;
  string tx_type = 4;
}

message SignedTransactionRequest {
  string consumer_token = 1;
  string request_id = 2;
  repeated  SignedTransaction signed_txn = 3;
}

message SignedTransactionWithSignature {
  string transaction_id = 1;
  string tx_hash = 2;
  string signed_tx = 3;
}

message SignedTransactionResponse {
  ReturnCode code = 1;
  string msg = 2;
  repeated SignedTransactionWithSignature signed_txn_with_signature = 3;
}

message SetTokenAddressRequest{
  string consumer_token = 1;
  string request_id = 2;
  repeated Token token_list = 3;
}

message SetTokenAddressResponse {
  ReturnCode code = 1;
  string msg = 2;
}

message Withdraw{
  string chain_id = 1;
  string from = 2;
  string to = 3;
  string value = 4;
  string contract_address = 5;
  string token_id = 6;
  string token_meta = 7;
}

message SubmitWithdrawRequest{
  string consumer_token = 1;
  string request_id = 2;
  repeated Withdraw withdraw_list = 3;
}

message SubmitWithdrawResponse{
  ReturnCode code = 1;
  string msg = 2;
}

service BusinessMiddleWireServices {
  rpc businessRegister(BusinessRegisterRequest) returns (BusinessRegisterResponse) {}
  rpc exportAddressesByPublicKeys(ExportAddressesRequest) returns (ExportAddressesResponse) {}

  rpc buildUnSignTransaction(UnSignTransactionRequest) returns(UnSignTransactionResponse){}
  rpc buildSignedTransaction(SignedTransactionRequest) returns(SignedTransactionResponse){}

  rpc setTokenAddress(SetTokenAddressRequest) returns (SetTokenAddressResponse) {}

  //提交提现交易
  rpc submitWithdraw(SubmitWithdrawRequest) returns (SubmitWithdrawResponse) {}
}